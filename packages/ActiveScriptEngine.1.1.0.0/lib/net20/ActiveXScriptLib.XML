<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ActiveXScriptLib</name>
    </assembly>
    <members>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.AddCode(System.String)">
            <summary>
            Adds the specified code to the scripting engine.
            </summary>
            <param name="code">The code to be added.</param>
            <exception cref="T:System.ArgumentNullException">If code is null.</exception>
            <exception cref="T:System.ArgumentException">If code is blank.</exception>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.AddCode(System.String,System.String)">
            <summary>
            Adds the specified code to the scripting engine.
            The code that is added will be available only under the namespace specified
            instead of in the global scope of the script.
            </summary>
            <param name="code">The code to be added.</param>
            <param name="namespaceName">The name of the namespace to add the code to.</param>
            <exception cref="T:System.ArgumentNullException">If code is null.</exception>
            <exception cref="T:System.ArgumentException">If code is blank.</exception>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.AddCode(System.String,System.String,System.String)">
            <summary>
            Adds the specified code to the scripting engine under the specified namespace.
            The code that is added will be available only under the namespace specified
            instead of in the global scope of the script. The script name will be used
            to provide more useful error information if an error occurs during the execution
            of the code that was added.
            </summary>
            <param name="code">The code to be added.</param>
            <param name="namespaceName">The name of the namespace to add the code to.</param>
            <param name="scriptName">The script name that the code came from.</param>
            <exception cref="T:System.ArgumentNullException">If code is null.</exception>
            <exception cref="T:System.ArgumentException">If code is blank.</exception>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.AddGlobalMemberObject(System.String,System.Object)">
            <summary>
            Adds the specified object into the script context with the specified name.
            The methods on the object can be called without the name as if they were
            native functions available in the script.
            </summary>
            <param name="name">The name the object can optionally be referenced as.</param>
            <param name="value">The object to be added.</param>
            <exception cref="T:System.ArgumentException">If the name has been used previously to add an object.</exception>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.AddObject(System.String,System.Object)">
            <summary>
            Adds the specified object into the script context with the specified name.
            </summary>
            <param name="name">The name the object will be referenced as.</param>
            <param name="value">The object to be added.</param>
            <exception cref="T:System.ArgumentException">If the name has been used previously to add an object.</exception>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.GetScriptHandle">
            <summary>
            Gets the IDispatch handle for the root namespace.
            </summary>
            <returns>An IDispatch handle for the root namespace.</returns>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.GetScriptHandle(System.String)">
            <summary>
            Gets the IDispatch handle for the specified namespace.
            </summary>
            <param name="namespaceName">The namespace of the IDispatch handle to get, or null
            to get the root namespace.</param>
            <returns>An IDispatch handle.</returns>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.GetScriptObject(System.String)">
            <summary>
            Gets the script host object of the specified name.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>The script host object.</returns>
            <exception cref="T:System.ArgumentException">If the specified host object did not exist.</exception>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.Evaluate(System.String)">
            <summary>
            Evaluates the specified code inside the context of the script and returns
            the result, or null if no result was returned.
            </summary>
            <param name="code">The code to evaluate.</param>
            <returns>The result of the evaluation.</returns>
            <exception cref="T:System.ArgumentNullException">If code is null.</exception>
            <exception cref="T:System.ArgumentException">If code is blank.</exception>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.Start">
            <summary>
            Puts the scripting engine into the Started state.
            At this point code will be executed in the order they were added to the script engine.
            </summary>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.Dispose">
            <summary>
            Stops and disposes this ActiveScriptEngine.
            </summary>
        </member>
        <member name="M:ActiveXScriptLib.ActiveScriptEngine.ScriptHasHostObject(System.String)">
            <summary>
            Returns if the script contains a host object of the specified name.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>True if the script contains a host object of the specified name, otherwise false.</returns>
        </member>
        <member name="P:ActiveXScriptLib.ActiveScriptEngine.IsRunning">
            <summary>
            Gets a value indicating whether the script engine is running.
            </summary>
        </member>
    </members>
</doc>
